import streamlit as st
import json
import os
from datetime import datetime
import base64

# Import CCCD OCR Client
try:
    from cccd_client import ocr_client, start_ocr_server_if_needed, display_extracted_info
    CCCD_OCR_AVAILABLE = True
except ImportError:
    CCCD_OCR_AVAILABLE = False

st.set_page_config(
    page_title="Doctor App - Trang Ch·ªß",
    page_icon="üè•",
    layout="centered",
    initial_sidebar_state="expanded"
)

# Function to encode image to base64
def get_base64_image(image_path):
    try:
        with open(image_path, "rb") as img_file:
            return base64.b64encode(img_file.read()).decode()
    except:
        return None

# Get images for styling
doctor_image_path = "/Users/apple/Desktop/LLM-apps/image/Homepage.png"
doctor_base64 = get_base64_image(doctor_image_path)

vinbig_logo_path = "/Users/apple/Desktop/LLM-apps/image/logo_vinbig.png"
vinbig_logo_base64 = get_base64_image(vinbig_logo_path)

# Enhanced Medical Styling
if doctor_base64:
    background_style = f"background-image: url('data:image/png;base64,{doctor_base64}');"
else:
    background_style = "background: linear-gradient(135deg, #f0f8ff 0%, #e1f2ff 25%, #d1ecff 50%, #c1e6ff 75%, #b1e0ff 100%);"

st.markdown(
    f"""
    <style>
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&family=Poppins:wght@300;400;500;600;700;800;900&family=Outfit:wght@300;400;500;600;700;800;900&display=swap');
    /* Hide Streamlit UI Elements */
    #MainMenu {{visibility: hidden;}}
    footer {{visibility: hidden;}}
    header {{visibility: hidden;}}
    .stDeployButton {{display: none;}}
    [data-testid="stToolbar"] {{display: none;}}
    [data-testid="stDecoration"] {{display: none;}}
    [data-testid="stStatusWidget"] {{display: none;}}
    [data-testid="manage-app-button"] {{display: none;}}
    /* Global Scroll Animation Setup */
    html {{
        scroll-behavior: smooth;
    }}
    
    .stApp {{
        {background_style}
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
        background-attachment: fixed;
        font-family: 'Outfit', 'Inter', sans-serif;
        min-height: 100vh;
        position: relative;
        overflow-x: hidden;
    }}
    
    .stApp::before {{
        content: '';
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: linear-gradient(135deg, 
            rgba(240, 248, 255, 0.85) 0%, 
            rgba(225, 242, 255, 0.8) 25%,
            rgba(209, 236, 255, 0.75) 50%,
            rgba(193, 230, 255, 0.8) 75%,
            rgba(177, 224, 255, 0.85) 100%);
        z-index: 0;
        pointer-events: none;
        animation: backgroundShift 20s ease-in-out infinite;
    }}
    
    @keyframes backgroundShift {{
        0%, 100% {{ 
            background: linear-gradient(135deg, 
                rgba(240, 248, 255, 0.85) 0%, 
                rgba(225, 242, 255, 0.8) 25%,
                rgba(209, 236, 255, 0.75) 50%,
                rgba(193, 230, 255, 0.8) 75%,
                rgba(177, 224, 255, 0.85) 100%);
        }}
        50% {{ 
            background: linear-gradient(135deg, 
                rgba(177, 224, 255, 0.85) 0%, 
                rgba(193, 230, 255, 0.8) 25%,
                rgba(209, 236, 255, 0.75) 50%,
                rgba(225, 242, 255, 0.8) 75%,
                rgba(240, 248, 255, 0.85) 100%);
        }}
    }}
    
    /* Advanced Animation Classes */
    .animate-on-scroll {{
        opacity: 0;
        transform: translateY(50px);
        transition: all 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    }}
    
    .animate-on-scroll.animate {{
        opacity: 1;
        transform: translateY(0);
    }}
    
    .slide-in-left {{
        opacity: 0;
        transform: translateX(-100px);
        animation: slideInLeft 1.2s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards;
    }}
    
    .slide-in-right {{
        opacity: 0;
        transform: translateX(100px);
        animation: slideInRight 1.2s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards;
    }}
    
    .fade-in-up {{
        opacity: 0;
        transform: translateY(30px);
        animation: fadeInUp 1s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards;
    }}
    
    .scale-in {{
        opacity: 0;
        transform: scale(0.8);
        animation: scaleIn 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards;
    }}
    
    @keyframes slideInLeft {{
        0% {{
            opacity: 0;
            transform: translateX(-100px);
        }}
        100% {{
            opacity: 1;
            transform: translateX(0);
        }}
    }}
    
    @keyframes slideInRight {{
        0% {{
            opacity: 0;
            transform: translateX(100px);
        }}
        100% {{
            opacity: 1;
            transform: translateX(0);
        }}
    }}
    
    @keyframes fadeInUp {{
        0% {{
            opacity: 0;
            transform: translateY(30px);
        }}
        100% {{
            opacity: 1;
            transform: translateY(0);
        }}
    }}
    
    @keyframes scaleIn {{
        0% {{
            opacity: 0;
            transform: scale(0.8);
        }}
        100% {{
            opacity: 1;
            transform: scale(1);
        }}
    }}
    
    /* Staggered Animation Delays */
    .delay-100 {{ animation-delay: 0.1s; }}
    .delay-200 {{ animation-delay: 0.2s; }}
    .delay-300 {{ animation-delay: 0.3s; }}
    .delay-400 {{ animation-delay: 0.4s; }}
    .delay-500 {{ animation-delay: 0.5s; }}
    .delay-600 {{ animation-delay: 0.6s; }}
    .delay-700 {{ animation-delay: 0.7s; }}
    .delay-800 {{ animation-delay: 0.8s; }}
    
    .main-container {{
        position: relative;
        z-index: 10;
        padding: 2rem;
        max-width: 1200px;
        margin: 0 auto;
    }}
    
    .hero-section {{
        text-align: center;
        margin-bottom: 3rem;
        padding: 3rem 2rem;
        background: linear-gradient(135deg, 
            rgba(255, 255, 255, 0.95) 0%, 
            rgba(248, 252, 255, 0.92) 50%, 
            rgba(240, 248, 255, 0.95) 100%);
        border-radius: 20px;
        position: relative;
        box-shadow: 
            0 15px 35px rgba(0, 102, 204, 0.1),
            inset 0 1px 0 rgba(255, 255, 255, 0.8);
        border: 3px solid transparent;
        background-clip: padding-box;
        backdrop-filter: blur(10px);
        transition: all 0.3s ease;
        overflow: hidden;
    }}
    
    .hero-section::before {{
        content: '';
        position: absolute;
        top: -3px;
        left: -3px;
        right: -3px;
        bottom: -3px;
        background: linear-gradient(45deg, 
            #87ceeb, #87cefa, #add8e6, #b0e0e6,
            #e0f6ff, #b0e0e6, #add8e6, #87ceeb);
        background-size: 400% 400%;
        border-radius: 23px;
        z-index: -1;
        animation: borderFlow 4s ease-in-out infinite;
    }}
    
    .hero-section:hover {{
        transform: translateY(-3px);
        box-shadow: 
            0 20px 40px rgba(0, 102, 204, 0.15),
            inset 0 1px 0 rgba(255, 255, 255, 0.9);
    }}
    
    @keyframes borderFlow {{
        0% {{ background-position: 0% 50%; }}
        50% {{ background-position: 100% 50%; }}
        100% {{ background-position: 0% 50%; }}
    }}
    
    .main-title {{
        font-size: 3.2rem;
        font-weight: 700;
        color: #003366;
        margin-bottom: 1rem;
        text-shadow: 0 2px 4px rgba(0, 102, 204, 0.2);
    }}
    
    .subtitle {{
        font-size: 1.2rem;
        color: #0066cc;
        font-weight: 500;
        margin-bottom: 2rem;
        line-height: 1.5;
    }}
    
    /* Enhanced Medical Icons with Advanced Animations */
    .medical-icons {{
        display: flex;
        justify-content: center;
        gap: 2rem;
        margin: 2rem 0;
        font-size: 2.5rem;
    }}
    
    .medical-icon {{
        transition: all 0.4s cubic-bezier(0.68, -0.55, 0.265, 1.55);
        filter: grayscale(30%);
        cursor: pointer;
        position: relative;
        display: inline-block;
    }}
    
    .medical-icon::after {{
        content: '';
        position: absolute;
        top: 50%;
        left: 50%;
        width: 0;
        height: 0;
        background: radial-gradient(circle, rgba(255,255,255,0.3) 0%, transparent 70%);
        border-radius: 50%;
        transform: translate(-50%, -50%);
        transition: all 0.3s ease;
        z-index: -1;
    }}
    
    .medical-icon:hover {{
        transform: translateY(-10px) scale(1.2) rotate(10deg);
        filter: grayscale(0%) brightness(1.2);
        text-shadow: 0 0 20px currentColor;
    }}
    
    .medical-icon:hover::after {{
        width: 60px;
        height: 60px;
    }}
    
    .medical-icon:nth-child(1) {{ 
        color: #e74c3c;
        animation: iconFloat 3s ease-in-out infinite;
    }}
    .medical-icon:nth-child(2) {{ 
        color: #f39c12;
        animation: iconFloat 3s ease-in-out infinite 0.6s;
    }}
    .medical-icon:nth-child(3) {{ 
        color: #3498db;
        animation: iconFloat 3s ease-in-out infinite 1.2s;
    }}
    .medical-icon:nth-child(4) {{ 
        color: #27ae60;
        animation: iconFloat 3s ease-in-out infinite 1.8s;
    }}
    .medical-icon:nth-child(5) {{ 
        color: #9b59b6;
        animation: iconFloat 3s ease-in-out infinite 2.4s;
    }}
    
    @keyframes iconFloat {{
        0%, 100% {{ transform: translateY(0) rotate(0deg); }}
        50% {{ transform: translateY(-10px) rotate(5deg); }}
    }}
    
    /* Scroll-triggered Info Cards */
    .info-card {{
        background: linear-gradient(135deg, 
            rgba(255, 255, 255, 0.9) 0%, 
            rgba(248, 252, 255, 0.85) 100%);
        border-radius: 15px;
        padding: 2rem;
        margin-bottom: 1.5rem;
        box-shadow: 0 15px 30px rgba(0, 102, 204, 0.1);
        border: 1px solid rgba(0, 102, 204, 0.1);
        transition: all 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
        text-align: center;
        position: relative;
        overflow: hidden;
    }}
    
    .info-card::before {{
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, 
            transparent, 
            rgba(255, 255, 255, 0.4), 
            transparent);
        transition: left 0.6s ease;
    }}
    
    .info-card:hover {{
        transform: translateY(-8px) scale(1.02);
        box-shadow: 0 25px 50px rgba(0, 102, 204, 0.2);
        border-color: rgba(0, 188, 212, 0.3);
    }}
    
    .info-card:hover::before {{
        left: 100%;
    }}
    
    .card-icon {{
        font-size: 3rem;
        margin-bottom: 1rem;
        display: block;
        transition: all 0.3s ease;
    }}
    
    .info-card:hover .card-icon {{
        transform: scale(1.1) rotate(5deg);
        filter: drop-shadow(0 0 10px currentColor);
    }}
    
    .card-title {{
        font-size: 1.3rem;
        font-weight: 700;
        color: #003366;
        margin-bottom: 1rem;
        transition: color 0.3s ease;
    }}
    
    .info-card:hover .card-title {{
        color: #0066cc;
    }}
    
    .card-content {{
        color: #0066cc;
        line-height: 1.6;
        font-size: 1rem;
        transition: color 0.3s ease;
    }}
    
    .info-card:hover .card-content {{
        color: #003366;
    }}
    
    /* Advanced Form Animations */
    .form-container {{
        background: linear-gradient(135deg, 
            rgba(255, 255, 255, 0.95) 0%, 
            rgba(248, 252, 255, 0.9) 50%, 
            rgba(240, 248, 255, 0.95) 100%);
        border-radius: 20px;
        padding: 2.5rem;
        box-shadow: 
            0 20px 40px rgba(0, 102, 204, 0.15),
            inset 0 1px 0 rgba(255, 255, 255, 0.8);
        border: 2px solid rgba(0, 102, 204, 0.1);
        backdrop-filter: blur(15px);
        margin-bottom: 2rem;
        position: relative;
        overflow: hidden;
    }}
    
    .form-container::before {{
        content: '';
        position: absolute;
        top: -50%;
        left: -50%;
        width: 200%;
        height: 200%;
        background: conic-gradient(
            transparent,
            rgba(0, 188, 212, 0.1),
            transparent,
            rgba(0, 102, 204, 0.1),
            transparent
        );
        animation: formRotate 20s linear infinite;
        z-index: -1;
    }}
    
    @keyframes formRotate {{
        0% {{ transform: rotate(0deg); }}
        100% {{ transform: rotate(360deg); }}
    }}
    
    .form-title {{
        font-size: 2rem;
        font-weight: 800;
        color: #003366;
        text-align: center;
        margin-bottom: 2rem;
        position: relative;
    }}
    
    .form-title::after {{
        content: '';
        position: absolute;
        bottom: -10px;
        left: 50%;
        transform: translateX(-50%);
        width: 100px;
        height: 3px;
        background: linear-gradient(45deg, #0066cc, #4da6ff);
        border-radius: 2px;
        animation: titleUnderline 2s ease-in-out infinite;
    }}
    
    @keyframes titleUnderline {{
        0%, 100% {{ width: 100px; }}
        50% {{ width: 150px; }}
    }}
    
    .success-message {{
        background: linear-gradient(135deg, #4CAF50, #45a049);
        color: white;
        padding: 1.5rem;
        border-radius: 15px;
        text-align: center;
        margin-top: 2rem;
        font-weight: 600;
        font-size: 1.1rem;
        box-shadow: 0 15px 30px rgba(76, 175, 80, 0.3);
        animation: successPulse 2s ease-in-out infinite;
        position: relative;
        overflow: hidden;
    }}
    
    .success-message::before {{
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, 
            transparent, 
            rgba(255, 255, 255, 0.3), 
            transparent);
        animation: successShine 3s ease-in-out infinite;
    }}
    
    @keyframes successPulse {{
        0%, 100% {{ transform: scale(1); }}
        50% {{ transform: scale(1.02); }}
    }}
    
    @keyframes successShine {{
        0% {{ left: -100%; }}
        100% {{ left: 100%; }}
    }}
    
    /* Beautiful Sidebar Styling - Simplified */
    .css-1d391kg {{
        background: linear-gradient(145deg, 
            #1a237e 0%,
            #3949ab 25%, 
            #5c6bc0 50%, 
            #7986cb 75%, 
            #9fa8da 100%) !important;
        border-right: 4px solid rgba(255, 255, 255, 0.3) !important;
        box-shadow: 4px 0 20px rgba(0, 0, 0, 0.3) !important;
    }}
    
    /* Sidebar Text Colors */
    .css-1d391kg .stMarkdown p,
    .css-1d391kg .stMarkdown h1,
    .css-1d391kg .stMarkdown h2,
    .css-1d391kg .stMarkdown h3 {{
        color: #ffffff !important;
        text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3) !important;
    }}
    
    /* Sidebar Navigation */
    .css-1d391kg [data-testid="stSidebarNav"] {{
        background: rgba(255, 255, 255, 0.15) !important;
        border-radius: 15px !important;
        padding: 1rem !important;
        margin: 1rem 0 !important;
        border: 2px solid rgba(255, 255, 255, 0.3) !important;
    }}
    
    .css-1d391kg [data-testid="stSidebarNav"] a {{
        color: #ffffff !important;
        font-weight: 600 !important;
        padding: 0.8rem 1.2rem !important;
        border-radius: 10px !important;
        background: rgba(255, 255, 255, 0.1) !important;
        margin: 0.3rem 0 !important;
        transition: all 0.3s ease !important;
        border: 1px solid rgba(255, 255, 255, 0.2) !important;
    }}
    
    .css-1d391kg [data-testid="stSidebarNav"] a:hover {{
        background: rgba(255, 255, 255, 0.25) !important;
        transform: translateX(8px) !important;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2) !important;
    }}
    
    /* Sidebar Info and Success boxes */
    .css-1d391kg .stAlert {{
        border-radius: 10px !important;
        border: 1px solid rgba(255, 255, 255, 0.3) !important;
        backdrop-filter: blur(10px) !important;
    }}
    
    .css-1d391kg .stAlert p {{
        color: #ffffff !important;
        font-weight: 500 !important;
    }}
    
    /* Advanced JavaScript Scroll Animations */
    .scroll-fade-in {{
        opacity: 0;
        transform: translateY(30px);
        transition: all 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    }}
    
    .scroll-fade-in.active {{
        opacity: 1;
        transform: translateY(0);
    }}
    
    .scroll-slide-left {{
        opacity: 0;
        transform: translateX(-50px);
        transition: all 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    }}
    
    .scroll-slide-left.active {{
        opacity: 1;
        transform: translateX(0);
    }}
    
    .scroll-slide-right {{
        opacity: 0;
        transform: translateX(50px);
        transition: all 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    }}
    
    .scroll-slide-right.active {{
        opacity: 1;
        transform: translateX(0);
    }}
    
    .scroll-scale-in {{
        opacity: 0;
        transform: scale(0.9);
        transition: all 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    }}
    
    .scroll-scale-in.active {{
        opacity: 1;
        transform: scale(1);
    }}
    </style>
    
    <script>
    // Advanced Scroll Animation Script
    function initScrollAnimations() {{
        const observerOptions = {{
            threshold: 0.1,
            rootMargin: '0px 0px -50px 0px'
        }};
        
        const observer = new IntersectionObserver((entries) => {{
            entries.forEach(entry => {{
                if (entry.isIntersecting) {{
                    entry.target.classList.add('active');
                }}
            }});
        }}, observerOptions);
        
        // Observe elements with scroll animation classes
        document.querySelectorAll('.scroll-fade-in, .scroll-slide-left, .scroll-slide-right, .scroll-scale-in').forEach(el => {{
            observer.observe(el);
        }});
    }}
    
    // Enhanced Icon Hover Effects
    function addIconEffects() {{
        document.querySelectorAll('.medical-icon').forEach((icon, index) => {{
            icon.addEventListener('mouseenter', function() {{
                const randomRotation = (Math.random() * 20 - 10);
                this.style.transform = `translateY(-15px) scale(1.3) rotate(${{randomRotation}}deg)`;
                this.style.filter = 'grayscale(0%) brightness(1.3) drop-shadow(0 0 20px currentColor)';
            }});
            
            icon.addEventListener('mouseleave', function() {{
                this.style.transform = '';
                this.style.filter = '';
            }});
        }});
    }}
    
    // Initialize when page loads
    document.addEventListener('DOMContentLoaded', function() {{
        initScrollAnimations();
        addIconEffects();
        
        // Add parallax effect to background
        window.addEventListener('scroll', function() {{
            const scrolled = window.pageYOffset;
            const rate = scrolled * -0.5;
            document.querySelector('.stApp::before')?.style.setProperty('transform', `translateY(${{rate}}px)`);
        }});
    }});
    
    // Retry initialization for Streamlit's dynamic loading
    setTimeout(() => {{
        initScrollAnimations();
        addIconEffects();
    }}, 1000);
    
    setTimeout(() => {{
        initScrollAnimations();
        addIconEffects();
    }}, 3000);
    </script>
    """,
    unsafe_allow_html=True
)

# Header with logo
if vinbig_logo_base64:
    st.markdown(
        f"""
        <div style="text-align: center; margin-bottom: 2rem;">
            <img src="data:image/png;base64,{vinbig_logo_base64}" 
                 style="height: 80px; border-radius: 10px; box-shadow: 0 10px 25px rgba(0,102,204,0.3);"
                 alt="VinBig Logo"/>
        </div>
        """,
        unsafe_allow_html=True
    )

# Sidebar v·ªõi th√¥ng tin li√™n h·ªá v√† animation b√°c sƒ©
with st.sidebar:
    # Doctor Animation - simplified
    st.markdown("### üè• VinBig Doctor App")
    
    # Animated doctor section
    st.markdown(
        """
        <div style="text-align: center; margin: 2rem 0;">
            <div style="font-size: 4rem; animation: bounce 2s infinite;">üß¨ü¶†üß™üå°Ô∏è</div>
            <div style="display: flex; justify-content: center; gap: 1rem; margin-top: 1rem;">
                <span style="font-size: 2rem; animation: float 3s infinite;">üë©‚Äç‚öïÔ∏è</span>
                <span style="font-size: 2rem; animation: float 3s infinite 0.5s;">ü©∫</span>
                <span style="font-size: 2rem; animation: float 3s infinite 1s;">‚öïÔ∏èüè©</span>
            </div>
        </div>
        
        <style>
        @keyframes bounce {
            0%, 100% { transform: translateY(0); }
            50% { transform: translateY(-10px); }
        }
        @keyframes float {
            0%, 100% { transform: translateY(0) scale(1); }
            50% { transform: translateY(-5px) scale(1.1); }
        }
        </style>
        """,
        unsafe_allow_html=True
    )
    
    st.markdown("---")
    
    # Contact Information - using Streamlit components
    st.markdown("### üìû **TH√îNG TIN LI√äN H·ªÜ**")
    
    # Contact details
    st.info("""
    **üì± Hotline 24/7**  
    1900-555-888
    
    **üìß Email H·ªó Tr·ª£**  
    support@vinbig-doctor.vn
    
    **üè¢ ƒê·ªãa Ch·ªâ**  
    T√≤a VinBig, H√† N·ªôi
    
    **üïí Gi·ªù L√†m Vi·ªác**  
    24/7 - Lu√¥n s·∫µn s√†ng
    
    **üö® C·∫•p C·ª©u**  
    115 - Mi·ªÖn ph√≠
    """)
    
    st.markdown("---")
    
    # Additional info
    st.success("‚úÖ H·ªá th·ªëng AI h·ªó tr·ª£ ch·∫©n ƒëo√°n")
    st.warning("‚ö†Ô∏è Ch·ªâ mang t√≠nh ch·∫•t tham kh·∫£o")
    
    # Medical icons animation
    st.markdown(
        """
        <div style="text-align: center; margin: 1rem 0; font-size: 1.5rem;">
            <span style="animation: pulse 2s infinite;">ü©∫</span>
            <span style="animation: pulse 2s infinite 0.3s;">üíä</span>
            <span style="animation: pulse 2s infinite 0.6s;">üíâ</span>
            <span style="animation: pulse 2s infinite 0.9s;">üî¨</span>
            <span style="animation: pulse 2s infinite 1.2s;">üè•</span>
        </div>
        
        <style>
        @keyframes pulse {
            0%, 100% { transform: scale(1); opacity: 0.7; }
            50% { transform: scale(1.2); opacity: 1; }
        }
        </style>
        """,
        unsafe_allow_html=True
    )

# Main container
st.markdown('<div class="main-container">', unsafe_allow_html=True)

# Enhanced Hero Section v·ªõi animation slide-in t·ª´ tr√°i
st.markdown(
    """
    <div class="hero-section slide-in-left">
        <h1 class="main-title">üè• Doctor App - VinBig Medical Center</h1>
        <p class="subtitle fade-in-up delay-300">H·ªá th·ªëng qu·∫£n l√Ω th√¥ng tin b·ªánh nh√¢n th√¥ng minh v·ªõi c√¥ng ngh·ªá AI ti√™n ti·∫øn</p>
        <div class="medical-icons fade-in-up delay-500">
            <span class="medical-icon delay-100">ü©∫</span>
            <span class="medical-icon delay-200">üíä</span>
            <span class="medical-icon delay-300">üè•</span>
            <span class="medical-icon delay-400">‚öïÔ∏è</span>
            <span class="medical-icon delay-500">üíâ</span>
        </div>
    </div>
    """,
    unsafe_allow_html=True
)

# App Description Section v·ªõi scroll animations
st.markdown('<div class="scroll-fade-in">', unsafe_allow_html=True)
st.markdown("## üéØ Gi·ªõi thi·ªáu v·ªÅ ·ª©ng d·ª•ng")
st.markdown('</div>', unsafe_allow_html=True)

col1, col2 = st.columns([2, 1])

with col1:
    st.markdown('<div class="scroll-slide-left">', unsafe_allow_html=True)
    st.markdown("""
    ### üåü **Doctor App** - Gi·∫£i ph√°p y t·∫ø th√¥ng minh c·ªßa t∆∞∆°ng lai
    
    **Doctor App** l√† m·ªôt h·ªá th·ªëng qu·∫£n l√Ω th√¥ng tin b·ªánh nh√¢n hi·ªán ƒë·∫°i, ƒë∆∞·ª£c ph√°t tri·ªÉn b·ªüi **VinBig AI** 
    v·ªõi m·ª•c ti√™u c√°ch m·∫°ng h√≥a ng√†nh chƒÉm s√≥c s·ª©c kh·ªèe th√¥ng qua c√¥ng ngh·ªá ti√™n ti·∫øn.
    
    #### üî¨ **C√¥ng ngh·ªá AI t√≠ch h·ª£p:**
    - **Machine Learning**: H·ªó tr·ª£ ch·∫©n ƒëo√°n th√¥ng minh
    - **Deep Learning**: Ph√¢n t√≠ch h√¨nh ·∫£nh y t·∫ø
    - **Natural Language Processing**: X·ª≠ l√Ω h·ªì s∆° b·ªánh √°n
    - **Predictive Analytics**: D·ª± ƒëo√°n xu h∆∞·ªõng s·ª©c kh·ªèe
    
    #### üéØ **S·ª© m·ªánh:**
    Ch√∫ng t√¥i cam k·∫øt mang ƒë·∫øn gi·∫£i ph√°p y t·∫ø **an to√†n**, **ch√≠nh x√°c** v√† **hi·ªáu qu·∫£** 
    ƒë·ªÉ b√°c sƒ© c√≥ th·ªÉ ƒë∆∞a ra quy·∫øt ƒë·ªãnh ƒëi·ªÅu tr·ªã t·ªët nh·∫•t cho b·ªánh nh√¢n.
    """)
    st.markdown('</div>', unsafe_allow_html=True)

with col2:
    st.markdown('<div class="scroll-slide-right">', unsafe_allow_html=True)
    st.info("""
    üìä **Th·ªëng k√™ ·∫•n t∆∞·ª£ng:**
    
    ‚Ä¢ **15,000+** b·ªánh nh√¢n ƒë√£ tin t∆∞·ªüng
    ‚Ä¢ **50+** b√°c sƒ© chuy√™n nghi·ªáp
    ‚Ä¢ **99.5%** ƒë·ªô ch√≠nh x√°c AI
    ‚Ä¢ **24/7** h·ªó tr·ª£ kh√¥ng ng·ª´ng
    ‚Ä¢ **100%** b·∫£o m·∫≠t d·ªØ li·ªáu
    
    üèÜ **Ch·ª©ng nh·∫≠n:**
    ‚Ä¢ ISO 27001 - B·∫£o m·∫≠t th√¥ng tin
    ‚Ä¢ HIPAA Compliant - Tu√¢n th·ªß y t·∫ø
    ‚Ä¢ GDPR Ready - B·∫£o v·ªá d·ªØ li·ªáu
    """)
    st.markdown('</div>', unsafe_allow_html=True)

# Detailed User Guide Section v·ªõi animations
st.markdown("---")
st.markdown('<div class="scroll-fade-in">', unsafe_allow_html=True)
st.markdown("## üìö H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng chi ti·∫øt")
st.markdown('</div>', unsafe_allow_html=True)

st.markdown('<div class="scroll-scale-in">', unsafe_allow_html=True)
st.markdown("""
### üöÄ **Quy tr√¨nh ho√†n ch·ªânh t·ª´ A ƒë·∫øn Z**

ƒê·ªÉ s·ª≠ d·ª•ng **Doctor App** m·ªôt c√°ch hi·ªáu qu·∫£, vui l√≤ng l√†m theo c√°c b∆∞·ªõc sau:
""")
st.markdown('</div>', unsafe_allow_html=True)

# Step-by-step guide with enhanced styling v√† animations
step_col1, step_col2 = st.columns(2)

with step_col1:
    st.markdown('<div class="scroll-slide-left">', unsafe_allow_html=True)
    st.markdown("""
    #### **üîπ B∆Ø·ªöC 1: Chu·∫©n b·ªã th√¥ng tin**
    """)
    st.success("""
    üìã **T√†i li·ªáu c·∫ßn c√≥:**
    ‚Ä¢ CCCD/CMND c·ªßa b·ªánh nh√¢n
    ‚Ä¢ Th·∫ª b·∫£o hi·ªÉm y t·∫ø (n·∫øu c√≥)
    ‚Ä¢ H·ªì s∆° b·ªánh √°n c≈© (n·∫øu c√≥)
    ‚Ä¢ Danh s√°ch thu·ªëc ƒëang s·ª≠ d·ª•ng
    ‚Ä¢ Th√¥ng tin li√™n h·ªá kh·∫©n c·∫•p
    
    ‚è±Ô∏è **Th·ªùi gian:** 2-3 ph√∫t chu·∫©n b·ªã
    """)
    
    st.markdown("""
    #### **üîπ B∆Ø·ªöC 3: X√°c th·ª±c & l∆∞u tr·ªØ**
    """)
    st.info("""
    üîç **Qu√° tr√¨nh x√°c th·ª±c:**
    ‚Ä¢ H·ªá th·ªëng ki·ªÉm tra t√≠nh h·ª£p l·ªá
    ‚Ä¢ AI ph√¢n t√≠ch v√† ƒë√°nh gi√°
    ‚Ä¢ M√£ h√≥a d·ªØ li·ªáu AES-256
    ‚Ä¢ T·∫°o m√£ b·ªánh nh√¢n duy nh·∫•t
    ‚Ä¢ ƒê·ªìng b·ªô v√†o c∆° s·ªü d·ªØ li·ªáu
    
    üîê **B·∫£o m·∫≠t:** Tu√¢n th·ªß chu·∫©n qu·ªëc t·∫ø
    """)
    st.markdown('</div>', unsafe_allow_html=True)

with step_col2:
    st.markdown('<div class="scroll-slide-right">', unsafe_allow_html=True)
    st.markdown("""
    #### **üîπ B∆Ø·ªöC 2: ƒêi·ªÅn form th√¥ng tin**
    """)
    st.warning("""
    ‚úçÔ∏è **C√°ch ƒëi·ªÅn form hi·ªáu qu·∫£:**
    ‚Ä¢ ƒêi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin c√° nh√¢n
    ‚Ä¢ M√¥ t·∫£ chi ti·∫øt tri·ªáu ch·ª©ng
    ‚Ä¢ Li·ªát k√™ ti·ªÅn s·ª≠ b·ªánh t·∫≠t
    ‚Ä¢ Ghi r√µ thu·ªëc ƒëang s·ª≠ d·ª•ng
    ‚Ä¢ Th√™m ghi ch√∫ quan tr·ªçng
    
    üí° **M·∫πo:** Th√¥ng tin c√†ng chi ti·∫øt, ch·∫©n ƒëo√°n c√†ng ch√≠nh x√°c
    """)
    
    st.markdown("""
    #### **üîπ B∆Ø·ªöC 4: Kh√°m & ƒëi·ªÅu tr·ªã**
    """)
    st.error("""
    ü©∫ **Quy tr√¨nh kh√°m b·ªánh:**
    ‚Ä¢ B√°c sƒ© truy c·∫≠p h·ªì s∆° ƒëi·ªán t·ª≠
    ‚Ä¢ AI h·ªó tr·ª£ ph√¢n t√≠ch tri·ªáu ch·ª©ng
    ‚Ä¢ ƒê·ªÅ xu·∫•t ph∆∞∆°ng √°n ƒëi·ªÅu tr·ªã
    ‚Ä¢ Theo d√µi ti·∫øn tri·ªÉn b·ªánh
    ‚Ä¢ C·∫≠p nh·∫≠t h·ªì s∆° li√™n t·ª•c
    
    ‚öïÔ∏è **K·∫øt qu·∫£:** ƒêi·ªÅu tr·ªã hi·ªáu qu·∫£ v√† an to√†n
    """)
    st.markdown('</div>', unsafe_allow_html=True)

st.markdown("---")

# CCCD Upload Section
st.markdown('<div class="scroll-fade-in">', unsafe_allow_html=True)
st.markdown('<h2 class="form-title">üì∑ Tr√≠ch xu·∫•t th√¥ng tin t·ª´ CCCD</h2>', unsafe_allow_html=True)
st.markdown("""
<div style="background: linear-gradient(135deg, #e3f2fd 0%, #f3e5f5 100%); 
            padding: 20px; border-radius: 15px; margin: 20px 0; border-left: 5px solid #0066cc;">
    <h4 style="color: #0066cc; margin-bottom: 15px;">üöÄ T√≠nh nƒÉng m·ªõi: T·ª± ƒë·ªông ƒëi·ªÅn th√¥ng tin t·ª´ ·∫£nh CCCD</h4>
    <p style="margin: 10px 0; color: #333;">
        ‚Ä¢ Upload ·∫£nh cƒÉn c∆∞·ªõc c√¥ng d√¢n ƒë·ªÉ t·ª± ƒë·ªông tr√≠ch xu·∫•t th√¥ng tin<br>
        ‚Ä¢ AI s·∫Ω t·ª± ƒë·ªông ƒëi·ªÅn c√°c tr∆∞·ªùng th√¥ng tin b·ªánh nh√¢n<br>
        ‚Ä¢ H·ªó tr·ª£ c√°c ƒë·ªãnh d·∫°ng: JPG, PNG, JPEG
    </p>
</div>
""", unsafe_allow_html=True)
st.markdown('</div>', unsafe_allow_html=True)

# Initialize session state for CCCD data
if 'cccd_extracted_data' not in st.session_state:
    st.session_state.cccd_extracted_data = {}

if CCCD_OCR_AVAILABLE:
    # Server status check
    with st.expander("üîß Ki·ªÉm tra server OCR", expanded=False):
        if st.button("üîÑ Ki·ªÉm tra k·∫øt n·ªëi server"):
            start_ocr_server_if_needed()
    
    # CCCD Upload
    st.markdown('<div class="scroll-slide-right">', unsafe_allow_html=True)
    uploaded_file = st.file_uploader(
        "üì§ **Ch·ªçn ·∫£nh CCCD ƒë·ªÉ tr√≠ch xu·∫•t th√¥ng tin**",
        type=['png', 'jpg', 'jpeg'],
        help="H·ªó tr·ª£ ƒë·ªãnh d·∫°ng: PNG, JPG, JPEG. K√≠ch th∆∞·ªõc t·ªëi ƒëa: 16MB"
    )
    
    if uploaded_file is not None:
        # Display uploaded image
        col_img1, col_img2, col_img3 = st.columns([1, 2, 1])
        
        with col_img2:
            st.image(uploaded_file, caption=f"·∫¢nh CCCD: {uploaded_file.name}", use_column_width=True)
        
        # Extract button
        if st.button("ü§ñ Tr√≠ch xu·∫•t th√¥ng tin t·ª´ CCCD", type="primary", use_container_width=True):
            with st.spinner("üîÑ ƒêang x·ª≠ l√Ω ·∫£nh v√† tr√≠ch xu·∫•t th√¥ng tin..."):
                # Call OCR API
                result = ocr_client.extract_from_uploaded_file(uploaded_file)
                
                if result['success']:
                    st.session_state.cccd_extracted_data = result['data']
                    st.success("‚úÖ Tr√≠ch xu·∫•t th√¥ng tin th√†nh c√¥ng!")
                    
                    # Display extracted info
                    display_extracted_info(result['data'])
                    
                    st.info("üìù Th√¥ng tin ƒë√£ ƒë∆∞·ª£c l∆∞u t·∫°m th·ªùi. Cu·ªôn xu·ªëng ƒë·ªÉ xem th√¥ng tin t·ª± ƒë·ªông ƒëi·ªÅn v√†o form!")
                    
                else:
                    st.error(f"‚ùå L·ªói: {result['message']}")
                    if "server" in result['message'].lower():
                        st.markdown("""
                        **üîß H∆∞·ªõng d·∫´n kh·ªüi ƒë·ªông server:**
                        ```bash
                        # M·ªü terminal m·ªõi v√† ch·∫°y:
                        cd /Users/apple/Desktop/LLM-apps/Doctor_app
                        python cccd_ocr_server.py
                        ```
                        """)
    
    st.markdown('</div>', unsafe_allow_html=True)
    
else:
    st.warning("‚ö†Ô∏è T√≠nh nƒÉng OCR CCCD ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t. Vui l√≤ng ki·ªÉm tra file cccd_client.py")

st.markdown("---")

# Patient Information Form v·ªõi advanced animations
st.markdown('<div class="scroll-fade-in">', unsafe_allow_html=True)
st.markdown('<h2 class="form-title">üìã Th√¥ng tin b·ªánh nh√¢n</h2>', unsafe_allow_html=True)
st.markdown('</div>', unsafe_allow_html=True)

# Initialize session state for form success
if 'form_submitted' not in st.session_state:
    st.session_state.form_submitted = False

st.markdown('<div class="scroll-scale-in">', unsafe_allow_html=True)
with st.form("patient_info_form"):
    # Get extracted CCCD data for auto-fill
    cccd_data = st.session_state.cccd_extracted_data
    
    # Show auto-fill status
    if cccd_data:
        st.success("ü§ñ **Th√¥ng tin t·ª± ƒë·ªông ƒëi·ªÅn t·ª´ CCCD** - B·∫°n c√≥ th·ªÉ ch·ªânh s·ª≠a n·∫øu c·∫ßn")
    
    col1, col2 = st.columns(2)
    
    with col1:
        full_name = st.text_input(
            "**üë§ H·ªç v√† t√™n**",
            value=cccd_data.get('ho_ten', ''),
            placeholder="Nh·∫≠p h·ªç v√† t√™n ƒë·∫ßy ƒë·ªß",
            help="Vui l√≤ng nh·∫≠p h·ªç v√† t√™n ƒë·∫ßy ƒë·ªß c·ªßa b·ªánh nh√¢n"
        )
        
        phone = st.text_input(
            "**üì± S·ªë ƒëi·ªán tho·∫°i**",
            placeholder="0xxxxxxxxx",
            help="S·ªë ƒëi·ªán tho·∫°i li√™n h·ªá"
        )
        
        # Auto-fill address from CCCD
        default_address = cccd_data.get('noi_thuong_tru', '')
        if not default_address and cccd_data.get('que_quan'):
            default_address = cccd_data.get('que_quan', '')
        
        address = st.text_area(
            "**üè† ƒê·ªãa ch·ªâ**",
            value=default_address,
            placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ ƒë·∫ßy ƒë·ªß",
            help="ƒê·ªãa ch·ªâ n∆°i ·ªü hi·ªán t·∫°i"
        )
        
        emergency_contact = st.text_input(
            "**üö® Ng∆∞·ªùi li√™n h·ªá kh·∫©n c·∫•p**",
            placeholder="T√™n v√† s·ªë ƒëi·ªán tho·∫°i",
            help="Th√¥ng tin ng∆∞·ªùi th√¢n ƒë·ªÉ li√™n h·ªá khi c·∫ßn thi·∫øt"
        )
    
    with col2:
        # Auto-fill birth date from CCCD
        default_birth_date = None
        if cccd_data.get('ngay_sinh'):
            try:
                from datetime import datetime
                # Try different date formats
                date_str = cccd_data.get('ngay_sinh', '')
                for fmt in ['%d/%m/%Y', '%Y-%m-%d', '%d-%m-%Y']:
                    try:
                        default_birth_date = datetime.strptime(date_str, fmt).date()
                        break
                    except:
                        continue
            except:
                pass
        
        birth_date = st.date_input(
            "**üéÇ Ng√†y sinh**",
            value=default_birth_date,
            help="Ch·ªçn ng√†y sinh c·ªßa b·ªánh nh√¢n"
        )
        
        # Auto-fill gender from CCCD
        gender_options = ["Nam", "N·ªØ", "Kh√°c"]
        default_gender_index = 0  # Default to Nam
        if cccd_data.get('gioi_tinh'):
            gender_cccd = cccd_data.get('gioi_tinh', '').lower()
            if 'n·ªØ' in gender_cccd or 'female' in gender_cccd:
                default_gender_index = 1
            elif 'nam' in gender_cccd or 'male' in gender_cccd:
                default_gender_index = 0
        
        gender = st.selectbox(
            "**‚ö• Gi·ªõi t√≠nh**",
            options=gender_options,
            index=default_gender_index,
            help="Ch·ªçn gi·ªõi t√≠nh"
        )
        
        id_number = st.text_input(
            "**üÜî CCCD/CMND**",
            value=cccd_data.get('so_cccd', ''),
            placeholder="S·ªë cƒÉn c∆∞·ªõc c√¥ng d√¢n",
            help="S·ªë cƒÉn c∆∞·ªõc c√¥ng d√¢n ho·∫∑c ch·ª©ng minh nh√¢n d√¢n"
        )
        
        insurance_number = st.text_input(
            "**üè• S·ªë th·∫ª b·∫£o hi·ªÉm y t·∫ø**",
            placeholder="M√£ s·ªë BHYT",
            help="M√£ s·ªë th·∫ª b·∫£o hi·ªÉm y t·∫ø (n·∫øu c√≥)"
        )
        
        # Add nationality and place of origin from CCCD
        if cccd_data:
            nationality = st.text_input(
                "**üèÅ Qu·ªëc t·ªãch**",
                value=cccd_data.get('quoc_tich', ''),
                help="Qu·ªëc t·ªãch t·ª´ CCCD"
            )
            
            place_origin = st.text_input(
                "**üèûÔ∏è Qu√™ qu√°n**",
                value=cccd_data.get('que_quan', ''),
                help="Qu√™ qu√°n t·ª´ CCCD"
            )
    
    # Medical Analysis Section - AI Personalization Data
    st.markdown("---")
    st.markdown("### üß¨ Th√¥ng tin ph√¢n t√≠ch AI")
    
    col3, col4 = st.columns(2)
    
    with col3:
        current_symptoms = st.text_area(
            "**ÔøΩ Tri·ªáu ch·ª©ng hi·ªán t·∫°i**",
            placeholder="M√¥ t·∫£ chi ti·∫øt c√°c tri·ªáu ch·ª©ng: ƒëau ƒë·∫ßu, s·ªët, ho, kh√≥ th·ªü, ƒëau b·ª•ng...",
            help="Th√¥ng tin n√†y gi√∫p AI ph√¢n t√≠ch v√† ƒë·ªÅ xu·∫•t ch·∫©n ƒëo√°n ban ƒë·∫ßu"
        )
        
        pain_level = st.selectbox(
            "**ÔøΩ Ch·∫•t l∆∞·ª£ng gi·∫•c ng·ªß**",
            options=[
                "R·∫•t t·ªët - ng·ªß s√¢u gi·∫•c 7-8 ti·∫øng",
                "T·ªët - ng·ªß ƒë·ªß gi·∫•c, th·ªânh tho·∫£ng th·ª©c gi·ªØa ƒë√™m",
                "Trung b√¨nh - ng·ªß ƒë∆∞·ª£c nh∆∞ng kh√¥ng s√¢u gi·∫•c",
                "K√©m - th∆∞·ªùng xuy√™n m·∫•t ng·ªß, ng·ªß kh√¥ng ƒë·ªß gi·∫•c",
                "R·∫•t k√©m - m·∫•t ng·ªß tri·ªÅn mi√™n, ng·ªß d∆∞·ªõi 5 ti·∫øng"
            ],
            help="Ch·∫•t l∆∞·ª£ng gi·∫•c ng·ªß ·∫£nh h∆∞·ªüng tr·ª±c ti·∫øp ƒë·∫øn s·ª©c kh·ªèe t·ªïng th·ªÉ"
        )
        
        family_history = st.text_area(
            "**üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Ti·ªÅn s·ª≠ gia ƒë√¨nh**",
            placeholder="B·ªánh di truy·ªÅn, ung th∆∞, tim m·∫°ch, ti·ªÉu ƒë∆∞·ªùng trong gia ƒë√¨nh...",
            help="Th√¥ng tin di truy·ªÅn gi√∫p AI ƒë√°nh gi√° y·∫øu t·ªë nguy c∆°"
        )
    
    with col4:
        lifestyle_habits = st.text_area(
            "**üèÉ‚Äç‚ôÇÔ∏è Th√≥i quen s·ªëng**",
            placeholder="H√∫t thu·ªëc, u·ªëng r∆∞·ª£u, t·∫≠p th·ªÉ d·ª•c, ch·∫ø ƒë·ªô ƒÉn, gi·∫•c ng·ªß...",
            help="L·ªëi s·ªëng ·∫£nh h∆∞·ªüng l·ªõn ƒë·∫øn s·ª©c kh·ªèe v√† kh·∫£ nƒÉng h·ªìi ph·ª•c"
        )
        
        work_environment = st.selectbox(
            "**üè¢ M√¥i tr∆∞·ªùng l√†m vi·ªác**",
            options=[
                "VƒÉn ph√≤ng - √≠t v·∫≠n ƒë·ªông",
                "Lao ƒë·ªông ch√¢n tay",
                "Y t·∫ø - ti·∫øp x√∫c b·ªánh nh√¢n",
                "Gi√°o d·ª•c",
                "C√¥ng nghi·ªáp - h√≥a ch·∫•t",
                "N√¥ng nghi·ªáp",
                "D·ªãch v·ª• - ti·∫øp x√∫c ƒë√¥ng ng∆∞·ªùi",
                "C√¥ng ngh·ªá th√¥ng tin",
                "Kh√°c"
            ],
            help="M√¥i tr∆∞·ªùng l√†m vi·ªác c√≥ th·ªÉ l√† nguy√™n nh√¢n g√¢y b·ªánh"
        )
        
        stress_anxiety_level = st.selectbox(
            "**üò∞ M·ª©c ƒë·ªô cƒÉng th·∫≥ng/lo √¢u**",
            options=[
                "R·∫•t th·∫•p - cu·ªôc s·ªëng b√¨nh y√™n",
                "Th·∫•p - th·ªânh tho·∫£ng cƒÉng th·∫≥ng",
                "Trung b√¨nh - cƒÉng th·∫≥ng c√¥ng vi·ªác",
                "Cao - th∆∞·ªùng xuy√™n lo l·∫Øng",
                "R·∫•t cao - √°p l·ª±c li√™n t·ª•c"
            ],
            help="T√¢m l√Ω ·∫£nh h∆∞·ªüng tr·ª±c ti·∫øp ƒë·∫øn s·ª©c kh·ªèe th·ªÉ ch·∫•t"
        )
        
        additional_info = st.text_area(
            "**üí≠ Th√¥ng tin th√™m**",
            placeholder="Chia s·∫ª b·∫•t k·ª≥ ƒëi·ªÅu g√¨ b·∫°n mu·ªën b√°c sƒ© bi·∫øt: c·∫£m x√∫c, lo l·∫Øng, k·ª≥ v·ªçng, c√¢u h·ªèi...",
            help="Kh√¥ng gian t·ª± do ƒë·ªÉ b·∫°n chia s·∫ª nh·ªØng ƒëi·ªÅu quan tr·ªçng kh√°c m√† b·∫°n mu·ªën b√°c sƒ© bi·∫øt",
            height=100
        )
    
    # Submit button
    submitted = st.form_submit_button(
        "üíæ L∆∞u th√¥ng tin b·ªánh nh√¢n", 
        use_container_width=True,
        type="primary"
    )
    
    if submitted:
        # Validate required fields
        if not full_name or not phone or not birth_date:
            st.error("‚ùå Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc: H·ªç t√™n, S·ªë ƒëi·ªán tho·∫°i, Ng√†y sinh")
        else:
            # Create patient data
            patient_data = {
                "patient_id": f"BN_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
                "personal_info": {
                    "full_name": full_name,
                    "birth_date": birth_date.strftime("%Y-%m-%d"),
                    "gender": gender,
                    "phone": phone,
                    "id_number": id_number,
                    "address": address,
                    "emergency_contact": emergency_contact,
                    "insurance_number": insurance_number
                },
                "cccd_info": {
                    "extracted_from_image": bool(cccd_data),
                    "so_cccd": cccd_data.get('so_cccd', id_number),
                    "ho_ten": cccd_data.get('ho_ten', full_name),
                    "ngay_sinh": cccd_data.get('ngay_sinh', ''),
                    "gioi_tinh": cccd_data.get('gioi_tinh', ''),
                    "quoc_tich": cccd_data.get('quoc_tich', ''),
                    "que_quan": cccd_data.get('que_quan', ''),
                    "noi_thuong_tru": cccd_data.get('noi_thuong_tru', ''),
                    "nationality": locals().get('nationality', ''),
                    "place_origin": locals().get('place_origin', '')
                },
                "medical_analysis": {
                    "current_symptoms": current_symptoms,
                    "sleep_quality": pain_level,
                    "family_history": family_history,
                    "lifestyle_habits": lifestyle_habits,
                    "work_environment": work_environment,
                    "stress_anxiety_level": stress_anxiety_level,
                    "additional_info": additional_info
                },
                "created_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                "updated_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            }
            
            # Save to JSON file
            json_file_path = "/Users/apple/Desktop/LLM-apps/Doctor_app/patient_data.json"
            
            # Load existing data or create new
            try:
                if os.path.exists(json_file_path):
                    with open(json_file_path, 'r', encoding='utf-8') as f:
                        existing_data = json.load(f)
                else:
                    existing_data = {"patients": []}
            except:
                existing_data = {"patients": []}
            
            # Add new patient
            existing_data["patients"].append(patient_data)
            
            # Save updated data
            try:
                with open(json_file_path, 'w', encoding='utf-8') as f:
                    json.dump(existing_data, f, ensure_ascii=False, indent=2)
                
                st.session_state.form_submitted = True
                st.success(
                    f"""
                    ‚úÖ **Th√¥ng tin b·ªánh nh√¢n ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!**
                    
                    **M√£ b·ªánh nh√¢n:** {patient_data['patient_id']}
                    
                    **Th√¥ng tin ƒë√£ l∆∞u:**
                    - H·ªç t√™n: {full_name}
                    - S·ªë ƒëi·ªán tho·∫°i: {phone}
                    - Ng√†y t·∫°o: {patient_data['created_at']}
                    """
                )
                
                # Store patient data in session for DiabeteDoctor
                st.session_state.current_patient = patient_data
                
                # Navigation to DiabeteDoctor
                st.markdown("---")
                st.markdown("### üéØ Ti·∫øp theo: Ch·∫©n ƒëo√°n b·ªánh")
                
                col_nav1, col_nav2, col_nav3 = st.columns([1, 2, 1])
                
                with col_nav2:
                    if st.button(
                        "ü©∫ Chuy·ªÉn ƒë·∫øn B√°c sƒ© Ti·ªÉu ƒë∆∞·ªùng", 
                        type="primary", 
                        use_container_width=True,
                        help="Chuy·ªÉn ƒë·∫øn trang ch·∫©n ƒëo√°n ti·ªÉu ƒë∆∞·ªùng v·ªõi th√¥ng tin b·ªánh nh√¢n ƒë√£ l∆∞u"
                    ):
                        st.switch_page("pages/DiabeteDoctor.py")
                    
                    st.markdown("""
                    <div style="background: linear-gradient(135deg, #e8f5e8 0%, #f0f8ff 100%); 
                                padding: 15px; border-radius: 10px; margin: 15px 0; text-align: center;">
                        <p style="margin: 0; color: #2e7d32;">
                            üí° <strong>G·ª£i √Ω:</strong> Th√¥ng tin b·ªánh nh√¢n ƒë√£ ƒë∆∞·ª£c l∆∞u. 
                            B·∫°n c√≥ th·ªÉ ti·∫øp t·ª•c v·ªõi ch·∫©n ƒëo√°n ti·ªÉu ƒë∆∞·ªùng ho·∫∑c quay l·∫°i sau.
                        </p>
                    </div>
                    """, unsafe_allow_html=True)
                
            except Exception as e:
                st.error(f"‚ùå L·ªói khi l∆∞u d·ªØ li·ªáu: {str(e)}")
st.markdown('</div>', unsafe_allow_html=True)

st.markdown('</div>', unsafe_allow_html=True)

# Information Cards using Streamlit columns v·ªõi animations
st.markdown('<div class="scroll-fade-in">', unsafe_allow_html=True)
st.markdown("### üè• D·ªãch v·ª• c·ªßa ch√∫ng t√¥i")
st.markdown('</div>', unsafe_allow_html=True)

col1, col2 = st.columns(2)

with col1:
    st.markdown('<div class="scroll-slide-left">', unsafe_allow_html=True)
    st.markdown(
        """
        <div class="info-card">
            <div class="card-icon">ü©∫</div>
            <div class="card-title">Kh√°m b·ªánh chuy√™n nghi·ªáp</div>
            <div class="card-content">
                ƒê·ªôi ng≈© b√°c sƒ© gi√†u kinh nghi·ªám, s·ª≠ d·ª•ng c√¥ng ngh·ªá AI h·ªó tr·ª£ ch·∫©n ƒëo√°n ch√≠nh x√°c
            </div>
        </div>
        """,
        unsafe_allow_html=True
    )
    
    st.markdown(
        """
        <div class="info-card">
            <div class="card-icon">üîê</div>
            <div class="card-title">B·∫£o m·∫≠t tuy·ªát ƒë·ªëi</div>
            <div class="card-content">
                Th√¥ng tin b·ªánh nh√¢n ƒë∆∞·ª£c m√£ h√≥a v√† b·∫£o v·ªá theo ti√™u chu·∫©n y t·∫ø qu·ªëc t·∫ø
            </div>
        </div>
        """,
        unsafe_allow_html=True
    )
    st.markdown('</div>', unsafe_allow_html=True)

with col2:
    st.markdown('<div class="scroll-slide-right">', unsafe_allow_html=True)
    st.markdown(
        """
        <div class="info-card">
            <div class="card-icon">üìù</div>
            <div class="card-title">Qu·∫£n l√Ω h·ªì s∆° th√¥ng minh</div>
            <div class="card-content">
                H·ªá th·ªëng l∆∞u tr·ªØ v√† qu·∫£n l√Ω th√¥ng tin b·ªánh nh√¢n an to√†n, ti·ªán l·ª£i
            </div>
        </div>
        """,
        unsafe_allow_html=True
    )
    
    st.markdown(
        """
        <div class="info-card">
            <div class="card-icon">‚ö°</div>
            <div class="card-title">Ph·∫£n h·ªìi nhanh ch√≥ng</div>
            <div class="card-content">
                H·ªá th·ªëng x·ª≠ l√Ω th√¥ng tin nhanh ch√≥ng, h·ªó tr·ª£ b√°c sƒ© ƒë∆∞a ra quy·∫øt ƒë·ªãnh k·ªãp th·ªùi
            </div>
        </div>
        """,
        unsafe_allow_html=True
    )
    st.markdown('</div>', unsafe_allow_html=True)

st.markdown('</div>', unsafe_allow_html=True)

# Enhanced Footer v·ªõi animations
st.markdown("---")
st.markdown('<div class="scroll-fade-in">', unsafe_allow_html=True)
st.markdown("## üåê Th√¥ng tin t·ªï ch·ª©c")
st.markdown('</div>', unsafe_allow_html=True)

footer_col1, footer_col2, footer_col3 = st.columns(3)

with footer_col1:
    st.markdown('<div class="scroll-slide-left">', unsafe_allow_html=True)
    st.markdown("""
    ### üè¢ **VinBig AI**
    """)
    st.info("""
    **ƒê·ªãa ch·ªâ tr·ª• s·ªü:**
    T√≤a VinBig, Khu C√¥ng ngh·ªá cao
    H√† N·ªôi, Vi·ªát Nam
    
    **Gi·∫•y ph√©p:**
    ‚Ä¢ S·ªë ƒêKKD: 0123456789
    ‚Ä¢ Ng√†y c·∫•p: 01/01/2023
    ‚Ä¢ N∆°i c·∫•p: S·ªü KH&ƒêT H√† N·ªôi
    
    **Website:** vinbig.ai
    """)
    st.markdown('</div>', unsafe_allow_html=True)

with footer_col2:
    st.markdown('<div class="scroll-scale-in">', unsafe_allow_html=True)
    st.markdown("""
    ### üìû **Li√™n h·ªá nhanh**
    """)
    st.success("""
    **Hotline 24/7:**
    üî• Kh·∫©n c·∫•p: 1900-555-888
    üìû T∆∞ v·∫•n: 1900-555-999
    
    **Email:**
    üìß support@vinbig-doctor.vn
    üìß info@vinbig.ai
    
    **M·∫°ng x√£ h·ªôi:**
    üìò Facebook: /VinBigAI
    üì∑ Instagram: @vinbig_ai
    üê¶ Twitter: @VinBigAI
    """)
    st.markdown('</div>', unsafe_allow_html=True)

with footer_col3:
    st.markdown('<div class="scroll-slide-right">', unsafe_allow_html=True)
    st.markdown("""
    ### üéØ **T·∫ßm nh√¨n & S·ª© m·ªánh**
    """)
    st.warning("""
    **T·∫ßm nh√¨n 2030:**
    Tr·ªü th√†nh n·ªÅn t·∫£ng y t·∫ø AI #1 
    ƒê√¥ng Nam √Å
    
    **S·ª© m·ªánh:**
    Democratize healthcare through AI
    
    **Gi√° tr·ªã c·ªët l√µi:**
    ‚Ä¢ ƒê·ªïi m·ªõi s√°ng t·∫°o
    ‚Ä¢ An to√†n b·ªánh nh√¢n
    ‚Ä¢ Ch·∫•t l∆∞·ª£ng v∆∞·ª£t tr·ªôi
    ‚Ä¢ Tr√°ch nhi·ªám x√£ h·ªôi
    """)
    st.markdown('</div>', unsafe_allow_html=True)

# Copyright and legal footer v·ªõi animation
st.markdown('<div class="scroll-fade-in">', unsafe_allow_html=True)
st.markdown(
    """
    <div style="
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        text-align: center;
        padding: 2rem;
        border-radius: 15px;
        margin-top: 2rem;
        box-shadow: 0 10px 30px rgba(0,0,0,0.2);
        position: relative;
        overflow: hidden;
    ">
        <div style="
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(45deg, transparent 30%, rgba(255,255,255,0.1) 50%, transparent 70%);
            animation: footerShine 3s ease-in-out infinite;
        "></div>
        <h3 style="margin-bottom: 1rem; color: white; position: relative; z-index: 1;">üè• Doctor App - VinBig Medical Center</h3>
        <p style="font-size: 1.1rem; margin-bottom: 1rem; position: relative; z-index: 1;">
            H·ªá th·ªëng qu·∫£n l√Ω b·ªánh nh√¢n th√¥ng minh v·ªõi c√¥ng ngh·ªá AI ti√™n ti·∫øn
        </p>
        <div style="display: flex; justify-content: center; gap: 2rem; flex-wrap: wrap; margin-bottom: 1rem; position: relative; z-index: 1;">
            <span>üìû Hotline: 1900-555-888</span>
            <span>üìß Email: support@vinbig-doctor.vn</span>
            <span>üåê Website: vinbig.ai</span>
        </div>
        <hr style="border: 1px solid rgba(255,255,255,0.3); margin: 1rem 0;">
        <div style="font-size: 0.9rem; opacity: 0.8; position: relative; z-index: 1;">
            <p>¬© 2025 VinBig AI Corporation. All rights reserved.</p>
            <p>B·∫£o m·∫≠t d·ªØ li·ªáu ‚Ä¢ Tu√¢n th·ªß GDPR ‚Ä¢ Ch·ª©ng nh·∫≠n ISO 27001</p>
            <p style="font-style: italic;">
                "C√¥ng ngh·ªá AI ph·ª•c v·ª• s·ª©c kh·ªèe c·ªông ƒë·ªìng"
            </p>
        </div>
    </div>
    """,
    unsafe_allow_html=True
)
st.markdown('</div>', unsafe_allow_html=True)
